package com.educareapps.quiz.dao;

import java.util.List;
import com.educareapps.quiz.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER_TABLE".
 */
public class UserTable {

    private Long id;
    private long user_id;
    /** Not-null value. */
    private String user_name;
    /** Not-null value. */
    private String user_first_name;
    /** Not-null value. */
    private String user_last_name;
    /** Not-null value. */
    private String email;
    /** Not-null value. */
    private String address;
    /** Not-null value. */
    private String occupation;
    /** Not-null value. */
    private String contact_no;
    /** Not-null value. */
    private String created_at;
    private String status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserTableDao myDao;

    private List<LeaderBoardTable> leaderBoardToUser;

    public UserTable() {
    }

    public UserTable(Long id) {
        this.id = id;
    }

    public UserTable(Long id, long user_id, String user_name, String user_first_name, String user_last_name, String email, String address, String occupation, String contact_no, String created_at, String status) {
        this.id = id;
        this.user_id = user_id;
        this.user_name = user_name;
        this.user_first_name = user_first_name;
        this.user_last_name = user_last_name;
        this.email = email;
        this.address = address;
        this.occupation = occupation;
        this.contact_no = contact_no;
        this.created_at = created_at;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getUser_id() {
        return user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    /** Not-null value. */
    public String getUser_name() {
        return user_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_name(String user_name) {
        this.user_name = user_name;
    }

    /** Not-null value. */
    public String getUser_first_name() {
        return user_first_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_first_name(String user_first_name) {
        this.user_first_name = user_first_name;
    }

    /** Not-null value. */
    public String getUser_last_name() {
        return user_last_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_last_name(String user_last_name) {
        this.user_last_name = user_last_name;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    /** Not-null value. */
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(String address) {
        this.address = address;
    }

    /** Not-null value. */
    public String getOccupation() {
        return occupation;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOccupation(String occupation) {
        this.occupation = occupation;
    }

    /** Not-null value. */
    public String getContact_no() {
        return contact_no;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContact_no(String contact_no) {
        this.contact_no = contact_no;
    }

    /** Not-null value. */
    public String getCreated_at() {
        return created_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LeaderBoardTable> getLeaderBoardToUser() {
        if (leaderBoardToUser == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LeaderBoardTableDao targetDao = daoSession.getLeaderBoardTableDao();
            List<LeaderBoardTable> leaderBoardToUserNew = targetDao._queryUserTable_LeaderBoardToUser(id);
            synchronized (this) {
                if(leaderBoardToUser == null) {
                    leaderBoardToUser = leaderBoardToUserNew;
                }
            }
        }
        return leaderBoardToUser;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLeaderBoardToUser() {
        leaderBoardToUser = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
