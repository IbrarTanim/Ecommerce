package com.educareapps.quiz.dao;

import java.util.List;
import com.educareapps.quiz.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "QUESTION_SET_TABLE".
 */
public class QuestionSetTable {

    private Long id;
    private long question_set_id;
    /** Not-null value. */
    private String question_set;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String photo;
    /** Not-null value. */
    private String created_at;
    private long question_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionSetTableDao myDao;

    private List<LanguageTable> questoinSetToLanguage;

    public QuestionSetTable() {
    }

    public QuestionSetTable(Long id) {
        this.id = id;
    }

    public QuestionSetTable(Long id, long question_set_id, String question_set, String title, String photo, String created_at, long question_id) {
        this.id = id;
        this.question_set_id = question_set_id;
        this.question_set = question_set;
        this.title = title;
        this.photo = photo;
        this.created_at = created_at;
        this.question_id = question_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionSetTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getQuestion_set_id() {
        return question_set_id;
    }

    public void setQuestion_set_id(long question_set_id) {
        this.question_set_id = question_set_id;
    }

    /** Not-null value. */
    public String getQuestion_set() {
        return question_set;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion_set(String question_set) {
        this.question_set = question_set;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getPhoto() {
        return photo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhoto(String photo) {
        this.photo = photo;
    }

    /** Not-null value. */
    public String getCreated_at() {
        return created_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(long question_id) {
        this.question_id = question_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LanguageTable> getQuestoinSetToLanguage() {
        if (questoinSetToLanguage == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageTableDao targetDao = daoSession.getLanguageTableDao();
            List<LanguageTable> questoinSetToLanguageNew = targetDao._queryQuestionSetTable_QuestoinSetToLanguage(id);
            synchronized (this) {
                if(questoinSetToLanguage == null) {
                    questoinSetToLanguage = questoinSetToLanguageNew;
                }
            }
        }
        return questoinSetToLanguage;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestoinSetToLanguage() {
        questoinSetToLanguage = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
