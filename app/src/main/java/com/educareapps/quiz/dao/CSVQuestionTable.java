package com.educareapps.quiz.dao;

import java.util.List;
import com.educareapps.quiz.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CSVQUESTION_TABLE".
 */
public class CSVQuestionTable {

    private Long id;
    private long question_id;
    /** Not-null value. */
    private String question;
    /** Not-null value. */
    private String option_one;
    /** Not-null value. */
    private String option_two;
    /** Not-null value. */
    private String option_three;
    /** Not-null value. */
    private String option_four;
    /** Not-null value. */
    private String answer;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CSVQuestionTableDao myDao;

    private List<QuestionSetTable> CSVQuestionToquestionSet;

    public CSVQuestionTable() {
    }

    public CSVQuestionTable(Long id) {
        this.id = id;
    }

    public CSVQuestionTable(Long id, long question_id, String question, String option_one, String option_two, String option_three, String option_four, String answer) {
        this.id = id;
        this.question_id = question_id;
        this.question = question;
        this.option_one = option_one;
        this.option_two = option_two;
        this.option_three = option_three;
        this.option_four = option_four;
        this.answer = answer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCSVQuestionTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(long question_id) {
        this.question_id = question_id;
    }

    /** Not-null value. */
    public String getQuestion() {
        return question;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion(String question) {
        this.question = question;
    }

    /** Not-null value. */
    public String getOption_one() {
        return option_one;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOption_one(String option_one) {
        this.option_one = option_one;
    }

    /** Not-null value. */
    public String getOption_two() {
        return option_two;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOption_two(String option_two) {
        this.option_two = option_two;
    }

    /** Not-null value. */
    public String getOption_three() {
        return option_three;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOption_three(String option_three) {
        this.option_three = option_three;
    }

    /** Not-null value. */
    public String getOption_four() {
        return option_four;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOption_four(String option_four) {
        this.option_four = option_four;
    }

    /** Not-null value. */
    public String getAnswer() {
        return answer;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAnswer(String answer) {
        this.answer = answer;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuestionSetTable> getCSVQuestionToquestionSet() {
        if (CSVQuestionToquestionSet == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionSetTableDao targetDao = daoSession.getQuestionSetTableDao();
            List<QuestionSetTable> CSVQuestionToquestionSetNew = targetDao._queryCSVQuestionTable_CSVQuestionToquestionSet(id);
            synchronized (this) {
                if(CSVQuestionToquestionSet == null) {
                    CSVQuestionToquestionSet = CSVQuestionToquestionSetNew;
                }
            }
        }
        return CSVQuestionToquestionSet;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCSVQuestionToquestionSet() {
        CSVQuestionToquestionSet = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
