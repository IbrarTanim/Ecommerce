package com.educareapps.quiz.dao;

import java.util.List;
import com.educareapps.quiz.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "LANGUAGE_TABLE".
 */
public class LanguageTable {

    private Long id;
    private long lang_id;
    /** Not-null value. */
    private String lang_name;
    /** Not-null value. */
    private String status;
    /** Not-null value. */
    private String created_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LanguageTableDao myDao;

    private List<QuestionSetTable> questionSetToLanguage;

    public LanguageTable() {
    }

    public LanguageTable(Long id) {
        this.id = id;
    }

    public LanguageTable(Long id, long lang_id, String lang_name, String status, String created_at) {
        this.id = id;
        this.lang_id = lang_id;
        this.lang_name = lang_name;
        this.status = status;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLanguageTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getLang_id() {
        return lang_id;
    }

    public void setLang_id(long lang_id) {
        this.lang_id = lang_id;
    }

    /** Not-null value. */
    public String getLang_name() {
        return lang_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLang_name(String lang_name) {
        this.lang_name = lang_name;
    }

    /** Not-null value. */
    public String getStatus() {
        return status;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStatus(String status) {
        this.status = status;
    }

    /** Not-null value. */
    public String getCreated_at() {
        return created_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuestionSetTable> getQuestionSetToLanguage() {
        if (questionSetToLanguage == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionSetTableDao targetDao = daoSession.getQuestionSetTableDao();
            List<QuestionSetTable> questionSetToLanguageNew = targetDao._queryLanguageTable_QuestionSetToLanguage(id);
            synchronized (this) {
                if(questionSetToLanguage == null) {
                    questionSetToLanguage = questionSetToLanguageNew;
                }
            }
        }
        return questionSetToLanguage;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestionSetToLanguage() {
        questionSetToLanguage = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
